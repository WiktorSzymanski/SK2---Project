#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/select.h>
#include <sys/time.h>

#define BUFFER_SIZE 512
#define BACKLOG_SIZE 5
#define SERVER_PORT 1235

int main(int argc, char **argv)
{
    fd_set readfds, writefds, nextReadFds, response1fds, response2fds;
    struct timeval timeout;
    socklen_t clientSocketLength;
    struct sockaddr_in serverAddress, clientAddress;

    int serverFd = socket(PF_INET, SOCK_STREAM, 0),
        clientFd,
        on = 1,
        maxFd = serverFd,
        fdCount;

    char buffer[BUFFER_SIZE];
    char errorMessage[BUFFER_SIZE] = "\e[31mERROR\e[0m";

    setsockopt(serverFd, SOL_SOCKET, SO_REUSEADDR, (char *)&on, sizeof(on));

    serverAddress.sin_family = PF_INET;
    serverAddress.sin_addr.s_addr = INADDR_ANY;
    serverAddress.sin_port = htons(SERVER_PORT);

    int isPortAlreadyTaken = -1 == bind(serverFd, (struct sockaddr *)&serverAddress, sizeof(serverAddress));

    if (isPortAlreadyTaken)
    {
        printf("Couldn't open socket.\n");
        return EXIT_FAILURE;
    }

    listen(serverFd, BACKLOG_SIZE);
    // 150.254.32.67

    FD_ZERO(&readfds);
    FD_ZERO(&writefds);
    FD_ZERO(&nextReadFds);

    FD_ZERO(&response1fds);
    FD_ZERO(&response2fds);
    maxFd = serverFd;

    printf("Start\n");

    while (1)
    {
        readfds = nextReadFds;
        FD_SET(serverFd, &readfds);
        timeout.tv_sec = 5 * 60;
        timeout.tv_usec = 0;

        fdCount = select(maxFd + 1, &readfds, &writefds, (fd_set *)0, &timeout);

        if (fdCount == 0)
        {
            printf("\e[34m[TIMEOUT]\e[0m\n");
            continue;
        }

        if (FD_ISSET(serverFd, &readfds))
        {
            fdCount -= 1;
            clientSocketLength = sizeof(clientAddress);

            clientFd = accept(serverFd, (struct sockaddr *)&clientAddress, &clientSocketLength);

            FD_SET(clientFd, &nextReadFds);

            printf("\e[32m[CONNECTED]\e[0m: %s\t\e[32m[FD]\e[0m: %d\n", inet_ntoa((struct in_addr)clientAddress.sin_addr), clientFd);

            if (clientFd > maxFd)
                maxFd = clientFd;
        }

        for (int i = serverFd + 1; i <= maxFd && fdCount > 0; i++)
        {
            if (FD_ISSET(i, &writefds))
            {
                fdCount -= 1;

                if (FD_ISSET(i, &response1fds))
                {
                    write(i, "Adrian Kokot", strlen("Adrian Kokot"));
                    FD_CLR(i, &response1fds);
                }
                else if (FD_ISSET(i, &response2fds))
                {
                    write(i, "Wiktor Szymanski", strlen("Wiktor Szymanski"));
                    FD_CLR(i, &response2fds);
                }
                else
                {
                    write(i, errorMessage, BUFFER_SIZE);
                }

                close(i);

                FD_CLR(i, &writefds);

                if(i == maxFd)
                    while (maxFd > clientFd && !FD_ISSET(maxFd, &nextReadFds) && !FD_ISSET(maxFd, &writefds))
                        maxFd--;     
            }
            else if (FD_ISSET(i, &readfds))
            {
                fdCount -= 1;
                FD_CLR(i, &nextReadFds);

                read(i, buffer, BUFFER_SIZE);

                if (strncmp(buffer, "148165", 6) == 0)
                {
                    FD_SET(i, &response1fds);
                }
                else if (strncmp(buffer, "148084", 6) == 0)
                {
                    FD_SET(i, &response2fds);
                }

                FD_SET(i, &writefds);
                FD_CLR(i, &readfds);
            }
        }
    }

    close(serverFd);

    return EXIT_SUCCESS;
}
